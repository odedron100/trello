{"ast":null,"code":"// import { utilService } from \"./util.service\";\nimport { httpService } from './http.service.js'; // const backgroundImgs = require('../../data/boardBackground.json');\n// import { storageService } from \"./async-storage.service.js\";\n\nconst KEY = 'listDB';\nconst BOARD_URL = 'board/'; // const gList = []\n\nexport const listService = {\n  query,\n  getById,\n  remove,\n  save,\n  getEmptyList // getByUserId,\n\n};\n\nasync function query(filterBy) {\n  try {\n    const lists = await httpService.get(LIST_URL, filterBy);\n    localStorage.setItem(KEY, JSON.stringify(lists));\n    return lists;\n  } catch (err) {\n    console.log('Got err ', err);\n  } // let lists = utilService.loadFromStorage(KEY)\n  // if (!lists || !lists.length) {\n  //     lists = gList; // gLists -> some data from json .\n  //     utilService.saveToStorage(KEY, lists)\n  // }\n  // return storageService.query(KEY);\n\n}\n\nasync function getById(id) {\n  try {\n    const list = await httpService.get(LIST_URL + id);\n    return list;\n  } catch (err) {\n    console.log('Got err ', err);\n  } // return storageService.get(KEY, id);\n\n} // function getByUserId(id) {\n//   try {\n//     const gig = await httpService.get(`${GIG_URL + id}/profile`)\n//     return gig\n//   } catch (err) {\n//     console.log('Got err ', err)\n//   }\n// }\n\n\nasync function remove(id) {\n  try {\n    const list = await httpService.delete(LIST_URL + id);\n    return list;\n  } catch (err) {\n    console.log('Got err ', err);\n  } // return storageService.remove(KEY, id);\n\n}\n\nasync function save(list) {\n  try {\n    if (list._id) {\n      const updatedList = await httpService.put(LIST_URL + list._id, list);\n      return updatedList;\n    } else {\n      const savedList = await httpService.post(LIST_URL, list);\n      return savedList;\n    }\n  } catch (err) {\n    console.log(err);\n  } // return list._id ? storageService.put(KEY, list) : storageService.post(KEY, list);\n\n}\n\nfunction getEmptyList() {\n  return {\n    title: '',\n    cards: {} // tags: [],\n    // imgUrls: [''],\n    // price: 0,\n    // deliveryTime: null,\n    // rating: 4,\n    // creator: {\n    //   fullname: '',\n    //   imgUrl: '',\n    //   level: 3,\n    //   location: \"Israel\",\n    //   memberSince: null,\n    //   avgResponseTime: `${utilService.getRandomInt(1, 6)} Hours`,\n    //   lastDelivery: `About ${utilService.getRandomInt(1, 6)} Hours`,\n    // },\n    // reviews: []\n\n  };\n} // Create Test lists Data:\n// function _createToys() {\n//   var toys = JSON.parse(localStorage.getItem(KEY))\n//   if (!toys || !toys.length) {\n//     const TOY_URL = 'http://www.filltext.com/?rows=20&_id=%7bindex%7d&name=%7blorem|2%7d&price=%7bnumber|100%7d&type=%5b%22Educational%22,%22Funny%22,%22Adult%22%5d&createdAt=%7bdate|1970,2000%7d&inStock=%7bbool%7d&pretty=true'\n//     return axios.get(TOY_URL)\n//       .then(res => {\n//         toys = res.data\n//         localStorage.setItem(KEY, JSON.stringify(toys))\n//       })\n//   }\n//   return toys;\n// }","map":{"version":3,"sources":["/Users/odedron/Desktop/Oded - Development/React-projects/trello/frontend/src/services/board.service.js"],"names":["httpService","KEY","BOARD_URL","listService","query","getById","remove","save","getEmptyList","filterBy","lists","get","LIST_URL","localStorage","setItem","JSON","stringify","err","console","log","id","list","delete","_id","updatedList","put","savedList","post","title","cards"],"mappings":"AAAA;AACA,SAASA,WAAT,QAA4B,mBAA5B,C,CACA;AACA;;AAEA,MAAMC,GAAG,GAAG,QAAZ;AAEA,MAAMC,SAAS,GAAG,QAAlB,C,CAEA;;AAEA,OAAO,MAAMC,WAAW,GAAG;AACvBC,EAAAA,KADuB;AAEvBC,EAAAA,OAFuB;AAGvBC,EAAAA,MAHuB;AAIvBC,EAAAA,IAJuB;AAKvBC,EAAAA,YALuB,CAMvB;;AANuB,CAApB;;AASP,eAAeJ,KAAf,CAAqBK,QAArB,EAA+B;AAC3B,MAAI;AACA,UAAMC,KAAK,GAAG,MAAMV,WAAW,CAACW,GAAZ,CAAgBC,QAAhB,EAA0BH,QAA1B,CAApB;AACAI,IAAAA,YAAY,CAACC,OAAb,CAAqBb,GAArB,EAA0Bc,IAAI,CAACC,SAAL,CAAeN,KAAf,CAA1B;AACA,WAAOA,KAAP;AACH,GAJD,CAIE,OAAOO,GAAP,EAAY;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBF,GAAxB;AACH,GAP0B,CAQ3B;AACA;AACA;AACA;AACA;AACA;;AACH;;AAED,eAAeZ,OAAf,CAAuBe,EAAvB,EAA2B;AACvB,MAAI;AACA,UAAMC,IAAI,GAAG,MAAMrB,WAAW,CAACW,GAAZ,CAAgBC,QAAQ,GAAGQ,EAA3B,CAAnB;AACA,WAAOC,IAAP;AACH,GAHD,CAGE,OAAOJ,GAAP,EAAY;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBF,GAAxB;AACH,GANsB,CAOvB;;AACH,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAeX,MAAf,CAAsBc,EAAtB,EAA0B;AACtB,MAAI;AACA,UAAMC,IAAI,GAAG,MAAMrB,WAAW,CAACsB,MAAZ,CAAmBV,QAAQ,GAAGQ,EAA9B,CAAnB;AACA,WAAOC,IAAP;AACH,GAHD,CAIA,OAAOJ,GAAP,EAAY;AACRC,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBF,GAAxB;AACH,GAPqB,CAQtB;;AAEH;;AAED,eAAeV,IAAf,CAAoBc,IAApB,EAA0B;AACtB,MAAI;AACA,QAAIA,IAAI,CAACE,GAAT,EAAc;AACV,YAAMC,WAAW,GAAG,MAAMxB,WAAW,CAACyB,GAAZ,CAAgBb,QAAQ,GAAGS,IAAI,CAACE,GAAhC,EAAqCF,IAArC,CAA1B;AACA,aAAOG,WAAP;AACH,KAHD,MAGO;AACH,YAAME,SAAS,GAAG,MAAM1B,WAAW,CAAC2B,IAAZ,CAAiBf,QAAjB,EAA2BS,IAA3B,CAAxB;AACA,aAAOK,SAAP;AACH;AACJ,GARD,CAQE,OAAOT,GAAP,EAAY;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACH,GAXqB,CAYtB;;AACH;;AAED,SAAST,YAAT,GAAwB;AACpB,SAAO;AACHoB,IAAAA,KAAK,EAAE,EADJ;AAEHC,IAAAA,KAAK,EAAE,EAFJ,CAGH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAjBG,GAAP;AAmBH,C,CAID;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// import { utilService } from \"./util.service\";\nimport { httpService } from './http.service.js';\n// const backgroundImgs = require('../../data/boardBackground.json');\n// import { storageService } from \"./async-storage.service.js\";\n\nconst KEY = 'listDB';\n\nconst BOARD_URL = 'board/';\n\n// const gList = []\n\nexport const listService = {\n    query,\n    getById,\n    remove,\n    save,\n    getEmptyList,\n    // getByUserId,\n}\n\nasync function query(filterBy) {\n    try {\n        const lists = await httpService.get(LIST_URL, filterBy)\n        localStorage.setItem(KEY, JSON.stringify(lists))\n        return lists\n    } catch (err) {\n        console.log('Got err ', err)\n    }\n    // let lists = utilService.loadFromStorage(KEY)\n    // if (!lists || !lists.length) {\n    //     lists = gList; // gLists -> some data from json .\n    //     utilService.saveToStorage(KEY, lists)\n    // }\n    // return storageService.query(KEY);\n}\n\nasync function getById(id) {\n    try {\n        const list = await httpService.get(LIST_URL + id)\n        return list\n    } catch (err) {\n        console.log('Got err ', err)\n    }\n    // return storageService.get(KEY, id);\n}\n\n// function getByUserId(id) {\n//   try {\n//     const gig = await httpService.get(`${GIG_URL + id}/profile`)\n//     return gig\n//   } catch (err) {\n//     console.log('Got err ', err)\n//   }\n// }\n\nasync function remove(id) {\n    try {\n        const list = await httpService.delete(LIST_URL + id)\n        return list\n    }\n    catch (err) {\n        console.log('Got err ', err)\n    }\n    // return storageService.remove(KEY, id);\n\n}\n\nasync function save(list) {\n    try {\n        if (list._id) {\n            const updatedList = await httpService.put(LIST_URL + list._id, list)\n            return updatedList\n        } else {\n            const savedList = await httpService.post(LIST_URL, list)\n            return savedList;\n        }\n    } catch (err) {\n        console.log(err)\n    }\n    // return list._id ? storageService.put(KEY, list) : storageService.post(KEY, list);\n}\n\nfunction getEmptyList() {\n    return {\n        title: '',\n        cards: {}\n        // tags: [],\n        // imgUrls: [''],\n        // price: 0,\n        // deliveryTime: null,\n        // rating: 4,\n        // creator: {\n        //   fullname: '',\n        //   imgUrl: '',\n        //   level: 3,\n        //   location: \"Israel\",\n        //   memberSince: null,\n        //   avgResponseTime: `${utilService.getRandomInt(1, 6)} Hours`,\n        //   lastDelivery: `About ${utilService.getRandomInt(1, 6)} Hours`,\n        // },\n        // reviews: []\n    }\n}\n\n\n\n// Create Test lists Data:\n// function _createToys() {\n//   var toys = JSON.parse(localStorage.getItem(KEY))\n//   if (!toys || !toys.length) {\n//     const TOY_URL = 'http://www.filltext.com/?rows=20&_id=%7bindex%7d&name=%7blorem|2%7d&price=%7bnumber|100%7d&type=%5b%22Educational%22,%22Funny%22,%22Adult%22%5d&createdAt=%7bdate|1970,2000%7d&inStock=%7bbool%7d&pretty=true'\n//     return axios.get(TOY_URL)\n//       .then(res => {\n//         toys = res.data\n//         localStorage.setItem(KEY, JSON.stringify(toys))\n//       })\n//   }\n//   return toys;\n// }\n"]},"metadata":{},"sourceType":"module"}