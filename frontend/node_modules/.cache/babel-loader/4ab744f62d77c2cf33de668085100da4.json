{"ast":null,"code":"// import { utilService } from \"./util.service\";\nimport { httpService } from './http.service.js'; // const backgroundImgs = require('../../data/boardBackground.json');\n// import { storageService } from \"./async-storage.service.js\";\n\nconst KEY = 'boardDB';\nconst BOARD_URL = 'board/'; // const gboard = []\n\nexport const boardService = {\n  query,\n  getById,\n  remove,\n  save,\n  getEmptyBoard // getByUserId,\n\n};\n\nasync function query(filterBy) {\n  try {\n    const boards = await httpService.get(BOARD_URL, filterBy);\n    localStorage.setItem(KEY, JSON.stringify(boards));\n    return boards;\n  } catch (err) {\n    console.log('Got err ', err);\n  } // let boards = utilService.loadFromStorage(KEY)\n  // if (!boards || !boards.length) {\n  //     boards = gBoard; // gBoards -> some data from json .\n  //     utilService.saveToStorage(KEY, boards)\n  // }\n  // return storageService.query(KEY);\n\n}\n\nasync function getById(id) {\n  try {\n    const board = await httpService.get(BOARD_URL + id);\n    return board;\n  } catch (err) {\n    console.log('Got err ', err);\n  } // return storageService.get(KEY, id);\n\n} // function getByUserId(id) {\n//   try {\n//     const gig = await httpService.get(`${GIG_URL + id}/profile`)\n//     return gig\n//   } catch (err) {\n//     console.log('Got err ', err)\n//   }\n// }\n\n\nasync function remove(id) {\n  try {\n    const board = await httpService.delete(BOARD_URL + id);\n    return board;\n  } catch (err) {\n    console.log('Got err ', err);\n  } // return storageService.remove(KEY, id);\n\n}\n\nasync function save(board) {\n  try {\n    if (board._id) {\n      const updatedBoard = await httpService.put(BOARD_URL + board._id, board);\n      return updatedBoard;\n    } else {\n      const savedBoard = await httpService.post(BOARD_URL, board);\n      return savedBoard;\n    }\n  } catch (err) {\n    console.log(err);\n  } // return board._id ? storageService.put(KEY, board) : storageService.post(KEY, board);\n\n}\n\nfunction getEmptyList() {\n  return {\n    title: '',\n    cards: {} // tags: [],\n    // imgUrls: [''],\n    // price: 0,\n    // deliveryTime: null,\n    // rating: 4,\n    // creator: {\n    //   fullname: '',\n    //   imgUrl: '',\n    //   level: 3,\n    //   location: \"Israel\",\n    //   memberSince: null,\n    //   avgResponseTime: `${utilService.getRandomInt(1, 6)} Hours`,\n    //   lastDelivery: `About ${utilService.getRandomInt(1, 6)} Hours`,\n    // },\n    // reviews: []\n\n  };\n} // Create Test boards Data:\n// function _createToys() {\n//   var toys = JSON.parse(localStorage.getItem(KEY))\n//   if (!toys || !toys.length) {\n//     const TOY_URL = 'http://www.filltext.com/?rows=20&_id=%7bindex%7d&name=%7blorem|2%7d&price=%7bnumber|100%7d&type=%5b%22Educational%22,%22Funny%22,%22Adult%22%5d&createdAt=%7bdate|1970,2000%7d&inStock=%7bbool%7d&pretty=true'\n//     return axios.get(TOY_URL)\n//       .then(res => {\n//         toys = res.data\n//         localStorage.setItem(KEY, JSON.stringify(toys))\n//       })\n//   }\n//   return toys;\n// }","map":{"version":3,"sources":["/Users/odedron/Desktop/Oded - Development/React-projects/trello/frontend/src/services/board.service.js"],"names":["httpService","KEY","BOARD_URL","boardService","query","getById","remove","save","getEmptyBoard","filterBy","boards","get","localStorage","setItem","JSON","stringify","err","console","log","id","board","delete","_id","updatedBoard","put","savedBoard","post","getEmptyList","title","cards"],"mappings":"AAAA;AACA,SAASA,WAAT,QAA4B,mBAA5B,C,CACA;AACA;;AAEA,MAAMC,GAAG,GAAG,SAAZ;AAEA,MAAMC,SAAS,GAAG,QAAlB,C,CAEA;;AAEA,OAAO,MAAMC,YAAY,GAAG;AACxBC,EAAAA,KADwB;AAExBC,EAAAA,OAFwB;AAGxBC,EAAAA,MAHwB;AAIxBC,EAAAA,IAJwB;AAKxBC,EAAAA,aALwB,CAMxB;;AANwB,CAArB;;AASP,eAAeJ,KAAf,CAAqBK,QAArB,EAA+B;AAC3B,MAAI;AACA,UAAMC,MAAM,GAAG,MAAMV,WAAW,CAACW,GAAZ,CAAgBT,SAAhB,EAA2BO,QAA3B,CAArB;AACAG,IAAAA,YAAY,CAACC,OAAb,CAAqBZ,GAArB,EAA0Ba,IAAI,CAACC,SAAL,CAAeL,MAAf,CAA1B;AACA,WAAOA,MAAP;AACH,GAJD,CAIE,OAAOM,GAAP,EAAY;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBF,GAAxB;AACH,GAP0B,CAQ3B;AACA;AACA;AACA;AACA;AACA;;AACH;;AAED,eAAeX,OAAf,CAAuBc,EAAvB,EAA2B;AACvB,MAAI;AACA,UAAMC,KAAK,GAAG,MAAMpB,WAAW,CAACW,GAAZ,CAAgBT,SAAS,GAAGiB,EAA5B,CAApB;AACA,WAAOC,KAAP;AACH,GAHD,CAGE,OAAOJ,GAAP,EAAY;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBF,GAAxB;AACH,GANsB,CAOvB;;AACH,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAeV,MAAf,CAAsBa,EAAtB,EAA0B;AACtB,MAAI;AACA,UAAMC,KAAK,GAAG,MAAMpB,WAAW,CAACqB,MAAZ,CAAmBnB,SAAS,GAAGiB,EAA/B,CAApB;AACA,WAAOC,KAAP;AACH,GAHD,CAIA,OAAOJ,GAAP,EAAY;AACRC,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBF,GAAxB;AACH,GAPqB,CAQtB;;AAEH;;AAED,eAAeT,IAAf,CAAoBa,KAApB,EAA2B;AACvB,MAAI;AACA,QAAIA,KAAK,CAACE,GAAV,EAAe;AACX,YAAMC,YAAY,GAAG,MAAMvB,WAAW,CAACwB,GAAZ,CAAgBtB,SAAS,GAAGkB,KAAK,CAACE,GAAlC,EAAuCF,KAAvC,CAA3B;AACA,aAAOG,YAAP;AACH,KAHD,MAGO;AACH,YAAME,UAAU,GAAG,MAAMzB,WAAW,CAAC0B,IAAZ,CAAiBxB,SAAjB,EAA4BkB,KAA5B,CAAzB;AACA,aAAOK,UAAP;AACH;AACJ,GARD,CAQE,OAAOT,GAAP,EAAY;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACH,GAXsB,CAYvB;;AACH;;AAED,SAASW,YAAT,GAAwB;AACpB,SAAO;AACHC,IAAAA,KAAK,EAAE,EADJ;AAEHC,IAAAA,KAAK,EAAE,EAFJ,CAGH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAjBG,GAAP;AAmBH,C,CAID;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// import { utilService } from \"./util.service\";\nimport { httpService } from './http.service.js';\n// const backgroundImgs = require('../../data/boardBackground.json');\n// import { storageService } from \"./async-storage.service.js\";\n\nconst KEY = 'boardDB';\n\nconst BOARD_URL = 'board/';\n\n// const gboard = []\n\nexport const boardService = {\n    query,\n    getById,\n    remove,\n    save,\n    getEmptyBoard,\n    // getByUserId,\n}\n\nasync function query(filterBy) {\n    try {\n        const boards = await httpService.get(BOARD_URL, filterBy)\n        localStorage.setItem(KEY, JSON.stringify(boards))\n        return boards\n    } catch (err) {\n        console.log('Got err ', err)\n    }\n    // let boards = utilService.loadFromStorage(KEY)\n    // if (!boards || !boards.length) {\n    //     boards = gBoard; // gBoards -> some data from json .\n    //     utilService.saveToStorage(KEY, boards)\n    // }\n    // return storageService.query(KEY);\n}\n\nasync function getById(id) {\n    try {\n        const board = await httpService.get(BOARD_URL + id)\n        return board\n    } catch (err) {\n        console.log('Got err ', err)\n    }\n    // return storageService.get(KEY, id);\n}\n\n// function getByUserId(id) {\n//   try {\n//     const gig = await httpService.get(`${GIG_URL + id}/profile`)\n//     return gig\n//   } catch (err) {\n//     console.log('Got err ', err)\n//   }\n// }\n\nasync function remove(id) {\n    try {\n        const board = await httpService.delete(BOARD_URL + id)\n        return board\n    }\n    catch (err) {\n        console.log('Got err ', err)\n    }\n    // return storageService.remove(KEY, id);\n\n}\n\nasync function save(board) {\n    try {\n        if (board._id) {\n            const updatedBoard = await httpService.put(BOARD_URL + board._id, board)\n            return updatedBoard\n        } else {\n            const savedBoard = await httpService.post(BOARD_URL, board)\n            return savedBoard;\n        }\n    } catch (err) {\n        console.log(err)\n    }\n    // return board._id ? storageService.put(KEY, board) : storageService.post(KEY, board);\n}\n\nfunction getEmptyList() {\n    return {\n        title: '',\n        cards: {}\n        // tags: [],\n        // imgUrls: [''],\n        // price: 0,\n        // deliveryTime: null,\n        // rating: 4,\n        // creator: {\n        //   fullname: '',\n        //   imgUrl: '',\n        //   level: 3,\n        //   location: \"Israel\",\n        //   memberSince: null,\n        //   avgResponseTime: `${utilService.getRandomInt(1, 6)} Hours`,\n        //   lastDelivery: `About ${utilService.getRandomInt(1, 6)} Hours`,\n        // },\n        // reviews: []\n    }\n}\n\n\n\n// Create Test boards Data:\n// function _createToys() {\n//   var toys = JSON.parse(localStorage.getItem(KEY))\n//   if (!toys || !toys.length) {\n//     const TOY_URL = 'http://www.filltext.com/?rows=20&_id=%7bindex%7d&name=%7blorem|2%7d&price=%7bnumber|100%7d&type=%5b%22Educational%22,%22Funny%22,%22Adult%22%5d&createdAt=%7bdate|1970,2000%7d&inStock=%7bbool%7d&pretty=true'\n//     return axios.get(TOY_URL)\n//       .then(res => {\n//         toys = res.data\n//         localStorage.setItem(KEY, JSON.stringify(toys))\n//       })\n//   }\n//   return toys;\n// }\n"]},"metadata":{},"sourceType":"module"}