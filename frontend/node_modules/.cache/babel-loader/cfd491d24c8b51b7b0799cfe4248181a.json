{"ast":null,"code":"var _jsxFileName = \"/Users/odedron/Desktop/Oded - Development/React-projects/trello/frontend/src/cmps/CardModal/CardModal.jsx\",\n    _s = $RefreshSig$();\n\nimport { useRef, useState } from 'react';\nimport { saveList } from '../../store/actions/ListActions';\nimport './CardModal.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { utilService } from '../../services/util.service';\nimport { CardListChange } from '../CardListChange/CardListChange';\nimport { CardDescription } from '../CardDescription/CardDescription';\nimport { CheckLists } from '../CheckLists/CheckLists';\nimport { CardSideBar } from '../CardSideBar/CardSideBar';\nimport { CloseModals } from '../CloseModals/CloseModals';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CardModal = props => {\n  _s();\n\n  const dispatch = useDispatch();\n  const cardModalContaiinerRef = useRef(null);\n  const cardModalRef = useRef(null);\n  const [cardToSave, setCardToSave] = useState(props.card);\n  const [newTaskTitleToAdd, setNewTaskTitleToAdd] = useState('');\n  const [whichSideBarModalOpen, setWhichSideBarModalOpen] = useState('');\n  const lists = useSelector(state => state.listReducer.lists);\n\n  const changeCardDetails = e => {\n    const type = e.target.name;\n    const value = e.target.value;\n    setCardToSave({ ...cardToSave,\n      [type]: value\n    });\n  };\n\n  const updateCard = (e, cardToSave) => {\n    const newList = { ...props.list\n    };\n    const cards = newList.cards;\n    cards[cardToSave.id] = cardToSave;\n    dispatch(saveList(newList));\n  };\n\n  const removeCard = e => {\n    const newList = { ...props.list\n    };\n    const cards = newList.cards;\n    delete cards[cardToSave.id];\n    dispatch(saveList(newList));\n    props.setIsOpenModal(false);\n  };\n\n  const addTaskToCheckList = (e, checkListId) => {\n    if (!newTaskTitleToAdd || newTaskTitleToAdd === '') return;\n    const newList = { ...props.list\n    };\n    const cards = newList.cards;\n    const cardCheckLists = cards[cardToSave.id].checkLists;\n    const checkListToUpdateIdx = cardCheckLists.findIndex(checkListFromArray => {\n      return checkListFromArray.id === checkListId;\n    });\n    const taskToAdd = {\n      id: utilService.makeId(),\n      title: newTaskTitleToAdd,\n      isDone: false\n    };\n    cardCheckLists[checkListToUpdateIdx].tasks[taskToAdd.id] = taskToAdd;\n    dispatch(saveList(newList));\n    setNewTaskTitleToAdd('');\n  };\n\n  const updateNewTaskTitle = e => {\n    setNewTaskTitleToAdd(e.target.value);\n  };\n\n  const changeCardList = e => {\n    const listOfCard = { ...props.list\n    };\n    const cards = listOfCard.cards;\n    const newListId = e.target.value;\n    cards[cardToSave.id].currList = newListId;\n    removeCard(null, cardToSave.id);\n    const newList = lists[newListId];\n    newList.cards = { ...newList.cards,\n      [cardToSave.id]: cardToSave\n    };\n    dispatch(saveList(newList));\n  };\n\n  const updateTaskDone = (e, checkListId, taskId) => {\n    const newList = { ...props.list\n    };\n    const cards = newList.cards;\n    const cardCheckLists = cards[cardToSave.id].checkLists;\n    const checkListToUpdateIdx = cardCheckLists.findIndex(checkListFromArray => {\n      return checkListFromArray.id === checkListId;\n    });\n    const currTaskIsDone = cardCheckLists[checkListToUpdateIdx].tasks[taskId].isDone;\n    cardCheckLists[checkListToUpdateIdx].tasks[taskId].isDone = !currTaskIsDone;\n    dispatch(saveList(newList));\n  };\n\n  const removeCheckList = checkListId => {\n    const newList = { ...props.list\n    };\n    const cards = newList.cards;\n    let cardCheckLists = cards[cardToSave.id].checkLists;\n    const checkListToUpdateIdx = cardCheckLists.findIndex(checkListFromArray => {\n      return checkListFromArray.id === checkListId;\n    });\n    cardCheckLists.splice(checkListToUpdateIdx, 1);\n    dispatch(saveList(newList));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"card-modal-container\",\n    ref: cardModalContaiinerRef,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-modal\",\n      ref: cardModalRef,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"title-modal-container modal-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"title-modal-label\",\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fas fa-laptop\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 58\n          }, this), \" Title\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"title-modal\",\n          children: props.card.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CardListChange, {\n        changeCardList: changeCardList,\n        cardToSave: props.list.cards[cardToSave.id],\n        lists: lists\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"main-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"main\", {\n          className: \"container\",\n          children: [/*#__PURE__*/_jsxDEV(CardDescription, {\n            cardToSave: props.list.cards[cardToSave.id],\n            changeCardDetails: changeCardDetails,\n            updateCard: updateCard\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 25\n          }, this), props.list.cards[cardToSave.id].checkLists.map((checkList, idx) => /*#__PURE__*/_jsxDEV(CheckLists, {\n            checkList: checkList,\n            updateTaskDone: updateTaskDone,\n            addTaskToCheckList: addTaskToCheckList,\n            updateNewTaskTitle: updateNewTaskTitle,\n            newTaskTitleToAdd: newTaskTitleToAdd,\n            removeCheckList: removeCheckList\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(CardSideBar, {\n          removeCard: removeCard,\n          cardToSave: props.list.cards[cardToSave.id],\n          whichSideBarModalOpen: whichSideBarModalOpen,\n          setWhichSideBarModalOpen: setWhichSideBarModalOpen,\n          list: props.list\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CloseModals, {\n        cardModalRef: cardModalRef,\n        setWhichSideBarModalOpen: setWhichSideBarModalOpen,\n        cardModalContaiinerRef: cardModalContaiinerRef,\n        setIsOpenModal: props.setIsOpenModal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CardModal, \"KCZAaKSKIsiuaHcmTN2URiya0Bg=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = CardModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"CardModal\");","map":{"version":3,"sources":["/Users/odedron/Desktop/Oded - Development/React-projects/trello/frontend/src/cmps/CardModal/CardModal.jsx"],"names":["useRef","useState","saveList","useDispatch","useSelector","utilService","CardListChange","CardDescription","CheckLists","CardSideBar","CloseModals","CardModal","props","dispatch","cardModalContaiinerRef","cardModalRef","cardToSave","setCardToSave","card","newTaskTitleToAdd","setNewTaskTitleToAdd","whichSideBarModalOpen","setWhichSideBarModalOpen","lists","state","listReducer","changeCardDetails","e","type","target","name","value","updateCard","newList","list","cards","id","removeCard","setIsOpenModal","addTaskToCheckList","checkListId","cardCheckLists","checkLists","checkListToUpdateIdx","findIndex","checkListFromArray","taskToAdd","makeId","title","isDone","tasks","updateNewTaskTitle","changeCardList","listOfCard","newListId","currList","updateTaskDone","taskId","currTaskIsDone","removeCheckList","splice","map","checkList","idx"],"mappings":"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","sourcesContent":["import { useRef,useState } from 'react';\nimport {saveList} from '../../store/actions/ListActions';\nimport './CardModal.scss';\nimport { useDispatch,useSelector } from 'react-redux';\nimport { utilService } from '../../services/util.service';\nimport { CardListChange } from '../CardListChange/CardListChange';\nimport { CardDescription } from '../CardDescription/CardDescription';\nimport {CheckLists} from '../CheckLists/CheckLists';\nimport { CardSideBar } from '../CardSideBar/CardSideBar';\nimport { CloseModals } from '../CloseModals/CloseModals';\n\nexport const CardModal = (props) => {\n    const dispatch = useDispatch();\n    const cardModalContaiinerRef = useRef(null);\n    const cardModalRef = useRef(null);\n    const [cardToSave,setCardToSave] = useState(props.card);\n    const [newTaskTitleToAdd,setNewTaskTitleToAdd] = useState('')\n    const [whichSideBarModalOpen,setWhichSideBarModalOpen] = useState('');\n    const lists = useSelector(state => state.listReducer.lists)\n\n    const changeCardDetails = (e) => {\n        const type = e.target.name\n        const value = e.target.value\n            setCardToSave({...cardToSave, [type]: value})\n    }\n\n    const updateCard = (e,cardToSave) => {\n        const newList = {...props.list};\n        const cards = newList.cards;\n        cards[cardToSave.id] = cardToSave\n        dispatch(saveList(newList))\n    }\n\n    const removeCard = (e) => {\n        const newList = {...props.list};\n        const cards = newList.cards\n        delete cards[cardToSave.id]\n        dispatch(saveList(newList))\n        props.setIsOpenModal(false)\n    }\n\n    const addTaskToCheckList = (e,checkListId) => {\n        if(!newTaskTitleToAdd || newTaskTitleToAdd === '') return;\n\n        const newList = {...props.list};\n        const cards = newList.cards;\n        const cardCheckLists = cards[cardToSave.id].checkLists\n\n        const checkListToUpdateIdx = cardCheckLists.findIndex(checkListFromArray => {\n            return checkListFromArray.id === checkListId\n        })\n\n        const taskToAdd = {\n            id : utilService.makeId(),\n            title:newTaskTitleToAdd,\n            isDone: false\n        }\n        cardCheckLists[checkListToUpdateIdx].tasks[taskToAdd.id] = taskToAdd;\n        dispatch(saveList(newList))\n        setNewTaskTitleToAdd('');\n    }\n\n    const updateNewTaskTitle = (e) => {\n        setNewTaskTitleToAdd(e.target.value);\n    }\n\n    const changeCardList = (e) =>{\n        const listOfCard = {...props.list};\n        const cards = listOfCard.cards\n        const newListId = e.target.value;\n        cards[cardToSave.id].currList = newListId\n\n        removeCard(null,cardToSave.id)\n\n        const newList = lists[newListId];\n        newList.cards = {...newList.cards,[cardToSave.id]:cardToSave};\n        dispatch(saveList(newList))\n    }\n\n    const updateTaskDone = (e,checkListId,taskId) => {\n        const newList = {...props.list};\n        const cards = newList.cards;\n        const cardCheckLists = cards[cardToSave.id].checkLists\n\n        const checkListToUpdateIdx = cardCheckLists.findIndex(checkListFromArray => {\n            return checkListFromArray.id === checkListId\n        })\n\n        const currTaskIsDone = cardCheckLists[checkListToUpdateIdx].tasks[taskId].isDone;\n\n        cardCheckLists[checkListToUpdateIdx].tasks[taskId].isDone = !currTaskIsDone\n        dispatch(saveList(newList))\n    }\n\n    const removeCheckList = (checkListId) => {\n        const newList = {...props.list};\n        const cards = newList.cards;\n        let cardCheckLists = cards[cardToSave.id].checkLists\n\n        const checkListToUpdateIdx = cardCheckLists.findIndex(checkListFromArray => {\n            return checkListFromArray.id === checkListId\n        })\n\n        cardCheckLists.splice(checkListToUpdateIdx,1)\n\n        dispatch(saveList(newList))\n    }\n\n    return (\n        <section className=\"card-modal-container\" ref={cardModalContaiinerRef}>\n            <div className=\"card-modal\" ref={cardModalRef}>\n                <div  className=\"title-modal-container modal-header\">\n                    <label className=\"title-modal-label\"><i className=\"fas fa-laptop\"></i> Title</label>\n                    <div className=\"title-modal\">{props.card.title}</div>\n                </div>\n                <CardListChange changeCardList={changeCardList} cardToSave={props.list.cards[cardToSave.id]} lists={lists}/>\n                <section className=\"main-container\">\n                    <main className=\"container\">\n                        <CardDescription cardToSave={props.list.cards[cardToSave.id]} changeCardDetails={changeCardDetails} updateCard={updateCard}/>\n                        {props.list.cards[cardToSave.id].checkLists.map((checkList,idx) =>\n                            <CheckLists checkList={checkList} key={idx} updateTaskDone={updateTaskDone} addTaskToCheckList={addTaskToCheckList}\n                             updateNewTaskTitle={updateNewTaskTitle} newTaskTitleToAdd={newTaskTitleToAdd} removeCheckList={removeCheckList}/>\n                        )}\n                    </main>\n                        <CardSideBar removeCard={removeCard} cardToSave={props.list.cards[cardToSave.id]} whichSideBarModalOpen={whichSideBarModalOpen} setWhichSideBarModalOpen={setWhichSideBarModalOpen} list={props.list}/>\n                </section>\n                <CloseModals cardModalRef={cardModalRef} setWhichSideBarModalOpen={setWhichSideBarModalOpen} cardModalContaiinerRef={cardModalContaiinerRef} setIsOpenModal={props.setIsOpenModal}/>\n            </div>\n        </section>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}