{"ast":null,"code":"var _jsxFileName = \"/Users/odedron/Desktop/Oded - Development/React-projects/trello/frontend/src/cmps/CardModal/CardModal.jsx\",\n    _s = $RefreshSig$();\n\nimport { useRef, useEffect, useCallback, useState } from 'react';\nimport { saveList } from '../../store/actions/ListActions';\nimport './CardModal.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { utilService } from '../../services/util.service';\nimport { CardListChange } from '../CardListChange/CardListChange';\nimport { CardDescription } from '../CardDescription/CardDescription';\nimport { CheckLists } from '../CheckLists/CheckLists';\nimport { CardSideBar } from '../CardSideBar/CardSideBar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CardModal = props => {\n  _s();\n\n  const dispatch = useDispatch();\n  const cardModalContaiinerRef = useRef(null);\n  const cardModalRef = useRef(null); // const sideBarModalRef = useRef(null);\n\n  const [cardToSave, setCardToSave] = useState(props.card);\n  const [newTaskTitleToAdd, setNewTaskTitleToAdd] = useState(null); // const [whichSideBarModalOpen,setWhichSideBarModalOpen] = useState('');\n\n  const lists = useSelector(state => state.listReducer.lists); // const handleDocumentClick = useCallback((e) => {\n  //     if(e.path[0] === cardModalRef.current\n  //         || e.path[1] === cardModalRef.current\n  //         || e.path[2] === cardModalRef.current\n  //         || e.target === cardModalRef.current){\n  //         // setWhichSideBarModalOpen('')\n  //     }\n  //     if (e.target === cardModalRef.current) {\n  //         return;\n  //     }\n  //         if (e.target === cardModalContaiinerRef.current) {\n  //             props.setIsOpenModal(false);\n  //         }\n  //     }, [cardModalRef, cardModalContaiinerRef]);\n\n  useEffect(() => {\n    document.addEventListener('click', handleDocumentClick);\n    return () => {\n      document.removeEventListener('click', handleDocumentClick);\n    };\n  });\n\n  const changeCardDetails = e => {\n    const type = e.target.name;\n    const value = e.target.value;\n    setCardToSave({ ...cardToSave,\n      [type]: value\n    });\n  };\n\n  const updateCard = (e, cardToSave) => {\n    const newList = { ...props.list\n    };\n    const cards = newList.cards;\n    cards[cardToSave.id] = cardToSave;\n    dispatch(saveList(newList));\n  }; // const openSideBarModal = (e,value) => {\n  //     setWhichSideBarModalOpen(value)\n  // }\n  // const updateLabelsCard = (e,value) => {\n  //     const newList = {...props.list};\n  //     const cards = newList.cards;\n  //     if(!cards[cardToSave.id].color.includes(value)){\n  //         cards[cardToSave.id].color = [...cards[cardToSave.id].color, value]\n  //     }\n  //     dispatch(saveList(newList))\n  // }\n\n\n  const removeCard = e => {\n    const newList = { ...props.list\n    };\n    const cards = newList.cards;\n    delete cards[cardToSave.id];\n    dispatch(saveList(newList));\n    props.setIsOpenModal(false);\n  }; //  const watchCard = (e) => {\n  //     const newList = {...props.list};\n  //     const cards = newList.cards\n  //     cards[cardToSave.id].isWatch = !cards[cardToSave.id].isWatch\n  //     dispatch(saveList(newList))\n  // }\n  // const addCheckList = (title) => {\n  //     const newList = {...props.list};\n  //     const cards = newList.cards;\n  //     const checkList = {\n  //         id:utilService.makeId(),\n  //         title,\n  //         tasks:[]\n  //     }\n  //     cards[cardToSave.id].checkLists.push(checkList);\n  //     dispatch(saveList(newList))\n  // }\n\n\n  const addTaskToCheckList = (e, checkListId) => {\n    const newList = { ...props.list\n    };\n    const cards = newList.cards;\n    const cardCheckLists = cards[cardToSave.id].checkLists;\n    const checkListToUpdateIdx = cardCheckLists.findIndex(checkListFromArray => {\n      return checkListFromArray.id === checkListId;\n    });\n    const taskToAdd = {\n      id: utilService.makeId(),\n      title: newTaskTitleToAdd,\n      isDone: false\n    };\n    cardCheckLists[checkListToUpdateIdx].tasks.push(taskToAdd);\n    dispatch(saveList(newList));\n  };\n\n  const updateNewTaskTitle = e => {\n    setNewTaskTitleToAdd(e.target.value);\n  };\n\n  const changeCardList = e => {\n    const listOfCard = { ...props.list\n    };\n    const cards = listOfCard.cards;\n    const newListId = e.target.value;\n    cards[cardToSave.id].currList = newListId;\n    removeCard(null, cardToSave.id);\n    console.log('e.target.value', e.target.value);\n    console.log('lists', lists);\n    console.log('newListId', newListId); // const newListIdx = lists.findIndex(list => {\n    //     return list._id === newListId\n    // })\n\n    const newList = lists[newListId];\n    newList.cards = { ...newList.cards,\n      [cardToSave.id]: cardToSave\n    };\n    dispatch(saveList(newList));\n  };\n\n  const updateTaskDone = (e, checkListId, taskId) => {\n    const newList = { ...props.list\n    };\n    const cards = newList.cards;\n    const cardCheckLists = cards[cardToSave.id].checkLists;\n    const checkListToUpdateIdx = cardCheckLists.findIndex(checkListFromArray => {\n      return checkListFromArray.id === checkListId;\n    });\n    const currTaskIsDone = cardCheckLists[checkListToUpdateIdx].tasks[taskId].isDone;\n    cardCheckLists[checkListToUpdateIdx].tasks[taskId].isDone = !currTaskIsDone;\n    dispatch(saveList(newList));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"card-modal-container\",\n    ref: cardModalContaiinerRef,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-modal\",\n      ref: cardModalRef,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"title-modal-container modal-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"title-modal-label\",\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fas fa-laptop\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 58\n          }, this), \" Title\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"title-modal\",\n          children: props.card.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CardListChange, {\n        changeCardList: changeCardList,\n        cardToSave: cardToSave,\n        lists: lists\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"main-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"main\", {\n          className: \"container\",\n          children: [/*#__PURE__*/_jsxDEV(CardDescription, {\n            cardToSave: cardToSave,\n            changeCardDetails: changeCardDetails,\n            updateCard: updateCard\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 25\n          }, this), cardToSave.checkLists.map((checkList, idx) => /*#__PURE__*/_jsxDEV(CheckLists, {\n            checkList: checkList,\n            idx: idx,\n            updateTaskDone: updateTaskDone,\n            addTaskToCheckList: addTaskToCheckList,\n            updateNewTaskTitle: updateNewTaskTitle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(CardSideBar, {\n          removeCard: removeCard,\n          cardToSave: cardToSave\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CardModal, \"d4aXvxaHsmbYXJ8xGAqqcsJLpcg=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = CardModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"CardModal\");","map":{"version":3,"sources":["/Users/odedron/Desktop/Oded - Development/React-projects/trello/frontend/src/cmps/CardModal/CardModal.jsx"],"names":["useRef","useEffect","useCallback","useState","saveList","useDispatch","useSelector","utilService","CardListChange","CardDescription","CheckLists","CardSideBar","CardModal","props","dispatch","cardModalContaiinerRef","cardModalRef","cardToSave","setCardToSave","card","newTaskTitleToAdd","setNewTaskTitleToAdd","lists","state","listReducer","document","addEventListener","handleDocumentClick","removeEventListener","changeCardDetails","e","type","target","name","value","updateCard","newList","list","cards","id","removeCard","setIsOpenModal","addTaskToCheckList","checkListId","cardCheckLists","checkLists","checkListToUpdateIdx","findIndex","checkListFromArray","taskToAdd","makeId","title","isDone","tasks","push","updateNewTaskTitle","changeCardList","listOfCard","newListId","currList","console","log","updateTaskDone","taskId","currTaskIsDone","map","checkList","idx"],"mappings":"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","sourcesContent":["import { useRef,useEffect,useCallback, useState } from 'react';\nimport {saveList} from '../../store/actions/ListActions';\nimport './CardModal.scss';\nimport { useDispatch,useSelector } from 'react-redux';\nimport { utilService } from '../../services/util.service';\nimport { CardListChange } from '../CardListChange/CardListChange';\nimport { CardDescription } from '../CardDescription/CardDescription';\nimport {CheckLists} from '../CheckLists/CheckLists';\nimport { CardSideBar } from '../CardSideBar/CardSideBar';\n\nexport const CardModal = (props) => {\n    const dispatch = useDispatch();\n    const cardModalContaiinerRef = useRef(null);\n    const cardModalRef = useRef(null);\n    // const sideBarModalRef = useRef(null);\n    const [cardToSave,setCardToSave] = useState(props.card);\n    const [newTaskTitleToAdd,setNewTaskTitleToAdd] = useState(null)\n    // const [whichSideBarModalOpen,setWhichSideBarModalOpen] = useState('');\n    const lists = useSelector(state => state.listReducer.lists)\n\n    // const handleDocumentClick = useCallback((e) => {\n    //     if(e.path[0] === cardModalRef.current\n    //         || e.path[1] === cardModalRef.current\n    //         || e.path[2] === cardModalRef.current\n    //         || e.target === cardModalRef.current){\n    //         // setWhichSideBarModalOpen('')\n    //     }\n\n    //     if (e.target === cardModalRef.current) {\n    //         return;\n    //     }\n\n\n    //         if (e.target === cardModalContaiinerRef.current) {\n    //             props.setIsOpenModal(false);\n    //         }\n    //     }, [cardModalRef, cardModalContaiinerRef]);\n\n    useEffect(() => {\n        document.addEventListener('click', handleDocumentClick);\n        return () => {\n            document.removeEventListener('click', handleDocumentClick);\n        }\n    });\n\n    const changeCardDetails = (e) => {\n        const type = e.target.name\n        const value = e.target.value\n            setCardToSave({...cardToSave, [type]: value})\n    }\n\n\n    const updateCard = (e,cardToSave) => {\n        const newList = {...props.list};\n        const cards = newList.cards;\n        cards[cardToSave.id] = cardToSave\n        dispatch(saveList(newList))\n    }\n\n    // const openSideBarModal = (e,value) => {\n    //     setWhichSideBarModalOpen(value)\n    // }\n\n    // const updateLabelsCard = (e,value) => {\n    //     const newList = {...props.list};\n    //     const cards = newList.cards;\n    //     if(!cards[cardToSave.id].color.includes(value)){\n    //         cards[cardToSave.id].color = [...cards[cardToSave.id].color, value]\n    //     }\n\n    //     dispatch(saveList(newList))\n    // }\n\n    const removeCard = (e) => {\n        const newList = {...props.list};\n        const cards = newList.cards\n        delete cards[cardToSave.id]\n        dispatch(saveList(newList))\n        props.setIsOpenModal(false)\n    }\n\n    //  const watchCard = (e) => {\n    //     const newList = {...props.list};\n    //     const cards = newList.cards\n    //     cards[cardToSave.id].isWatch = !cards[cardToSave.id].isWatch\n    //     dispatch(saveList(newList))\n    // }\n\n    // const addCheckList = (title) => {\n    //     const newList = {...props.list};\n    //     const cards = newList.cards;\n    //     const checkList = {\n    //         id:utilService.makeId(),\n    //         title,\n    //         tasks:[]\n    //     }\n    //     cards[cardToSave.id].checkLists.push(checkList);\n    //     dispatch(saveList(newList))\n    // }\n\n    const addTaskToCheckList = (e,checkListId) => {\n        const newList = {...props.list};\n        const cards = newList.cards;\n        const cardCheckLists = cards[cardToSave.id].checkLists\n\n        const checkListToUpdateIdx = cardCheckLists.findIndex(checkListFromArray => {\n            return checkListFromArray.id === checkListId\n        })\n\n        const taskToAdd = {\n            id : utilService.makeId(),\n            title:newTaskTitleToAdd,\n            isDone: false\n        }\n        cardCheckLists[checkListToUpdateIdx].tasks.push(taskToAdd)\n        dispatch(saveList(newList))\n\n    }\n\n    const updateNewTaskTitle = (e) => {\n        setNewTaskTitleToAdd(e.target.value);\n    }\n\n    const changeCardList = (e) =>{\n        const listOfCard = {...props.list};\n        const cards = listOfCard.cards\n        const newListId = e.target.value;\n        cards[cardToSave.id].currList = newListId\n\n        removeCard(null,cardToSave.id)\n\n        console.log('e.target.value', e.target.value);\n        console.log('lists', lists);\n        console.log('newListId', newListId);\n        // const newListIdx = lists.findIndex(list => {\n        //     return list._id === newListId\n        // })\n        const newList = lists[newListId];\n        newList.cards = {...newList.cards,[cardToSave.id]:cardToSave};\n        dispatch(saveList(newList))\n    }\n\n    const updateTaskDone = (e,checkListId,taskId) => {\n        const newList = {...props.list};\n        const cards = newList.cards;\n        const cardCheckLists = cards[cardToSave.id].checkLists\n\n        const checkListToUpdateIdx = cardCheckLists.findIndex(checkListFromArray => {\n            return checkListFromArray.id === checkListId\n        })\n\n        const currTaskIsDone = cardCheckLists[checkListToUpdateIdx].tasks[taskId].isDone;\n\n        cardCheckLists[checkListToUpdateIdx].tasks[taskId].isDone = !currTaskIsDone\n        dispatch(saveList(newList))\n    }\n\n    return (\n        <section className=\"card-modal-container\" ref={cardModalContaiinerRef}>\n            <div className=\"card-modal\" ref={cardModalRef}>\n                <div  className=\"title-modal-container modal-header\">\n                    <label className=\"title-modal-label\"><i className=\"fas fa-laptop\"></i> Title</label>\n                    <div className=\"title-modal\">{props.card.title}</div>\n                </div>\n                <CardListChange changeCardList={changeCardList} cardToSave={cardToSave} lists={lists}/>\n                <section className=\"main-container\">\n                    <main className=\"container\">\n                        <CardDescription cardToSave={cardToSave} changeCardDetails={changeCardDetails} updateCard={updateCard}/>\n                        {cardToSave.checkLists.map((checkList,idx) =>\n                            <CheckLists checkList={checkList} idx={idx} updateTaskDone={updateTaskDone} addTaskToCheckList={addTaskToCheckList} updateNewTaskTitle={updateNewTaskTitle}/>\n                        )}\n                    </main>\n                        <CardSideBar removeCard={removeCard} cardToSave={cardToSave}/>\n                        {/* <header className=\"side-bar-title\">ADD TO CARD</header>\n                        <div className=\"labels item\" onClick={((e) => openSideBarModal(e,'labels'))}><i className=\"fas fa-tag\"></i> labels </div>\n                        {whichSideBarModalOpen === 'labels' && <LabelsModal sideBarModalRef={sideBarModalRef}  updateLabelsCard={updateLabelsCard} />}\n                        <div className=\"watch item\" onClick={watchCard}><i className=\"far fa-eye\"></i> Watch </div>\n                        <div className=\"todo-list item\" onClick={((e) => openSideBarModal(e,'checkList'))}><i className=\"far fa-calendar-check\"></i> Checklist </div>\n                        {whichSideBarModalOpen === 'checkList' && <CheckListModal sideBarModalRef={sideBarModalRef} addCheckList={addCheckList} />}\n                        <div className=\"delete item\" onClick={removeCard}><i className=\"far fa-trash-alt\"></i> Delete Card </div> */}\n                </section>\n            </div>\n        </section>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}