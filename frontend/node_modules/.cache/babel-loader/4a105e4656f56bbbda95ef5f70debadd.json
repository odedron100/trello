{"ast":null,"code":"var _jsxFileName = \"/Users/odedron/Desktop/Oded - Development/React-projects/trello/frontend/src/cmps/List/List.jsx\",\n    _s = $RefreshSig$();\n\nimport './List.scss';\nimport { utilService } from '../../services/util.service';\nimport { useEffect, useState, useRef } from 'react';\nimport { FormButton } from '../FormButton';\nimport { useDispatch } from 'react-redux';\nimport { saveList, loadLists } from '../../store/actions/ListActions';\nimport { CardModal } from '../CardModal/CardModal';\nimport { CardList } from '../CardList/CardList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const List = ({\n  list\n}) => {\n  _s();\n\n  const [currCard, setCurrCard] = useState(null);\n  const [isOpenModal, setIsOpenModal] = useState(false);\n  const [isOpenHelpersModal, setIsOpenHelpersModal] = useState(false);\n  const editRef = useRef(null);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(loadLists());\n  }, []);\n\n  const handleNewCardSubmit = newItem => {\n    const cardId = utilService.makeId();\n    const newCard = {\n      id: cardId,\n      title: newItem.title,\n      description: '',\n      color: [],\n      isWatch: false,\n      currList: list._id,\n      checkLists: []\n    };\n    let listToSave = { ...list,\n      cards: { ...list.cards,\n        [cardId]: newCard\n      }\n    };\n    dispatch(saveList(listToSave));\n  };\n\n  const openModal = (e, card) => {\n    if (e.target === editRef.current) return;\n    setIsOpenModal(true);\n    setCurrCard(card);\n  };\n\n  const openHelpersModal = () => {\n    setIsOpenHelpersModal(true);\n  };\n\n  const cards = list.cards;\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"list\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"title\",\n        children: list.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"helpers\",\n        onClick: openHelpersModal,\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-ellipsis-h\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 69\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(CardList, {\n      cards: cards,\n      editRef: editRef,\n      openModal: openModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FormButton, {\n      itemType: \"card\",\n      onSubmit: handleNewCardSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), isOpenModal && /*#__PURE__*/_jsxDEV(CardModal, {\n      card: currCard,\n      list: list,\n      setIsOpenModal: setIsOpenModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 29\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n};\n\n_s(List, \"EZl/5Dv8CR3OE9ZyrY3qrqdx2O4=\", false, function () {\n  return [useDispatch];\n});\n\n_c = List;\n\nvar _c;\n\n$RefreshReg$(_c, \"List\");","map":{"version":3,"sources":["/Users/odedron/Desktop/Oded - Development/React-projects/trello/frontend/src/cmps/List/List.jsx"],"names":["utilService","useEffect","useState","useRef","FormButton","useDispatch","saveList","loadLists","CardModal","CardList","List","list","currCard","setCurrCard","isOpenModal","setIsOpenModal","isOpenHelpersModal","setIsOpenHelpersModal","editRef","dispatch","handleNewCardSubmit","newItem","cardId","makeId","newCard","id","title","description","color","isWatch","currList","_id","checkLists","listToSave","cards","openModal","e","card","target","current","openHelpersModal"],"mappings":"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","sourcesContent":["import './List.scss'\nimport {utilService} from '../../services/util.service';\nimport { useEffect,useState,useRef } from 'react';\nimport {FormButton} from '../FormButton'\nimport { useDispatch } from 'react-redux';\nimport {saveList ,loadLists} from '../../store/actions/ListActions'\nimport { CardModal } from '../CardModal/CardModal';\nimport { CardList } from '../CardList/CardList';\n\nexport const List = ({list}) => {\n    const [currCard,setCurrCard] = useState(null);\n    const [isOpenModal,setIsOpenModal] = useState(false);\n    const [isOpenHelpersModal,setIsOpenHelpersModal] = useState(false);\n    const editRef = useRef(null);\n    const dispatch = useDispatch();\n    useEffect(() => {\n        dispatch(loadLists())\n    }, []);\n\n\n    const handleNewCardSubmit = (newItem) => {\n        const cardId = utilService.makeId()\n        const newCard = {\n            id:cardId,\n            title: newItem.title,\n            description:'',\n            color:[],\n            isWatch:false,\n            currList: list._id,\n            checkLists:[]\n        }\n        let listToSave = {...list,cards:{...list.cards,[cardId]:newCard}}\n        dispatch(saveList(listToSave))\n    }\n\n    const openModal = (e,card) => {\n        if (e.target === editRef.current) return;\n        setIsOpenModal(true)\n        setCurrCard(card);\n    }\n\n    const openHelpersModal = () => {\n        setIsOpenHelpersModal(true)\n    }\n\n    const cards = list.cards;\n    return (\n        <section className=\"list\">\n            <header>\n                <div className=\"title\">{list.title}</div>\n                <div className=\"helpers\" onClick={openHelpersModal}><i className=\"fas fa-ellipsis-h\"></i></div>\n            </header>\n            <CardList cards={cards} editRef={editRef} openModal={openModal}/>\n            <FormButton itemType=\"card\" onSubmit={handleNewCardSubmit} />\n            {isOpenModal && <CardModal card={currCard} list={list} setIsOpenModal={setIsOpenModal} />}\n        </section>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}